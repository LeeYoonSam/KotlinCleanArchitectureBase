apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"

    defaultConfig {
        applicationId "com.test"
        minSdkVersion 16
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            minifyEnabled false
            testCoverageEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testProguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguardTest-rules.pro'
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }

    viewBinding {
        enabled = true
    }

    dataBinding {
        enabled = true
    }
}

dependencies {
    implementation project(':data')
    implementation project(":model")

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.2.0'
    implementation "androidx.constraintlayout:constraintlayout:1.1.3"
    implementation "androidx.recyclerview:recyclerview:1.1.0"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutineVer"

    // Architecture Components
    implementation "androidx.room:room-runtime:$roomVer"
    kapt "androidx.room:room-compiler:$roomVer"
    implementation "androidx.room:room-ktx:$roomVer"
    implementation "androidx.lifecycle:lifecycle-extensions:$archLifecycleVer"
    kapt "androidx.lifecycle:lifecycle-compiler:$archLifecycleVer"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0"

    // Dagger (의존성 주입)
    api "com.google.dagger:dagger:$daggerVer"
    kapt "com.google.dagger:dagger-compiler:$daggerVer"
    api "com.google.dagger:dagger-android:$daggerVer"
    kapt "com.google.dagger:dagger-android-processor:$daggerVer"
    implementation "com.google.dagger:dagger-android-support:$daggerVer"
    
    // Retrofit(HTTP API 인터페이스 전환)
    implementation "com.squareup.retrofit2:retrofit:$retrofitVer"
    implementation "com.squareup.retrofit2:converter-gson:$retrofitVer"
    implementation "com.squareup.okhttp3:logging-interceptor:4.6.0"
    implementation 'org.conscrypt:conscrypt-android:2.2.1'

    // Glide (이미지 로드 및 캐시)
    implementation "com.github.bumptech.glide:glide:$glideVer"
    kapt "com.github.bumptech.glide:compiler:$glideVer"

    // RxJava(비동기 및 스트림 조합)
    implementation "io.reactivex.rxjava3:rxjava:3.0.3"
    implementation "io.reactivex.rxjava3:rxandroid:3.0.0"

    // ThreeTenBP for the shared module only. Date and time API for Java.
    testImplementation "org.threeten:threetenbp:$threetenbpVer"
    implementation "org.threeten:threetenbp:$threetenbpVer:no-tzdb"

    // Logger
    implementation "com.jakewharton.timber:timber:$timberVer"

    // Test
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    // androidTest/test - Coroutine
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutineVer"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutineVer"

    // androidTest - Arch
    androidTestImplementation 'androidx.arch.core:core-testing:2.1.0'

    // androidTest - Mockito
    androidTestImplementation 'com.nhaarman:mockito-kotlin:1.5.0'
    androidTestImplementation 'org.mockito:mockito-android:3.3.3'
}

apply plugin: 'jacoco'

jacoco {
    toolVersion = '0.8.4'
    reportsDir = file("${buildDir}/reports")
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def excludes = [
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            'android/**/*.*',
            '**/activity/**'
    ]

    classDirectories.from = fileTree(
            dir: "$buildDir/intermediates/javac/debug/compileDebugJavaWithJavac/classes",
            excludes: excludes
    ) + fileTree(
            dir: "$buildDir/tmp/kotlin-classes/debug",
            excludes: excludes
    )

    sourceDirectories.from = files([
            android.sourceSets.main.java.srcDirs,
            "src/main/java"
    ])

    executionData.from = fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code_coverage/debugAndroidTest/connected/**/*.ec'
    ])
}